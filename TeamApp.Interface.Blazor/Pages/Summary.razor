@page "/summary"

@using TeamApp.Interface.Blazor.Pages.Standings
@using TeamApp.Interface.Blazor.Pages.Playoffs
@using TeamApp.Interface.Blazor.Pages.Games
@using TeamApp.Services
@using TeamApp.ViewModels.Views
@using TeamApp.ViewModels.Views.Games
@using TeamApp.ViewModels.Views.Competition.Playoff
@inject IGameDataService GameDataService
@inject ICompetitionService CompetitionService
@inject IStandingsService StandingsService
@inject IScheduleGameService GameService
@inject IPlayoffService PlayoffService

<h1>Daily View</h1>
<b>Current Year </b>@summary.CurrentYear
<br />
<b>Current Day</b>@summary.CurrentDay
<br />

<h3>Actions</h3>
<BSButton Value="PlayDay" OnClick="PlayDay"   IsActive="@ShowPlayDay()">Play Day</BSButton>
<BSButton Value="StartNextYear" OnClick="StartNextYear" IsActive="@ShowStartNextYear()">Start Next Year</BSButton>
<BSButton Value="StartNextCompetition" OnClick="StartNextCompetition" IsActive="@ShowStartNextCompetition()">Start Next Competition</BSButton>
<BSTabGroup>
    <BSTabList>
        @foreach (var day in days)
        {

            <BSTab InitialSelection="@GetSelected(day.Day, summary.CurrentDay)">
                <BSTabLabel>@GetDayString(day.Day, summary.CurrentDay)</BSTabLabel>                
                <BSTabContent>
                    blah blah
                    <ScheduleDaySummary Day="@day" />
                </BSTabContent>
            </BSTab>
        }
    </BSTabList>
</BSTabGroup>

<BSTabGroup>
    <BSTabList>
        <BSTab>
            <BSTabLabel>Standings</BSTabLabel>
            <BSTabContent>
                <Standings model="standings" />
            </BSTabContent>
        </BSTab>
        <BSTab>
            <BSTabLabel>Playofs</BSTabLabel>
            <BSTabContent><Playoffs model="playoffs" /></BSTabContent>
        </BSTab>
    </BSTabList>
</BSTabGroup>
<br />
@code {
    GameSummary summary;
    StandingsViewModel standings;
    ScheduleDaySummaryViewModel[] days;
    PlayoffSummaryViewModel playoffs;

    string dayString = "";

    protected override async Task OnInitializedAsync()
    {
        RefreshData();

    }

    private async void RefreshData()
    {
        summary = await GameDataService.GetGameSummary();
        days = await GameService.GetScheduleDays(summary.CurrentDay - 1, 3, summary.CurrentYear);
        standings = await StandingsService.GetStandings(1, summary.CurrentYear, 1);
        playoffs = await PlayoffService.GetPlayoffSummary(2, summary.CurrentYear);
        StateHasChanged();

    }

    protected bool ShowPlayDay()
    {
        return summary.AllowPlayGames;
    }

    protected bool ShowStartNextYear()
    {
        return summary.AllowIncrementYear;
    }

    protected bool ShowStartNextCompetition()
    {
        return summary.AllowStartNextCompetition;
    }
    protected bool GetSelected(int day, int currentDay)
    {
        if (day == (currentDay - 1))
            return true;
        else
            return false;
    }

    protected string GetDayString(int dayNumber, int currentDay)
    {
        if (dayNumber == (currentDay - 1))
        {
            return "Today - Day " + (dayNumber - 1);
        }
        return "Day " + dayNumber;
    }

    void PlayDay(MouseEventArgs args)
    {
        GameDataService.PlayAndProcessDay();
        RefreshData();
    }

    public void StartNextCompetition(MouseEventArgs args)
    {
        GameDataService.StartNextCompetition();
        RefreshData();
    }

    public void StartNextYear(MouseEventArgs args)
    {
        GameDataService.StartNextYear();
        RefreshData();
    }


}
